//
// Generated file, do not edit! Created by nedtool 4.6 from message/Status2BSMessage.msg.
//

#ifndef _STATUS2BSMESSAGE_M_H_
#define _STATUS2BSMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 	#include "ClusterMessage_m.h"
// }}

/**
 * Class generated from <tt>message/Status2BSMessage.msg:22</tt> by nedtool.
 * <pre>
 * packet Status2BSMessage extends ClusterMessage
 * {
 *     int energy;
 *     int status;
 *     int cluster;
 *     int xpos;
 *     int ypos;
 * }
 * </pre>
 */
class Status2BSMessage : public ::ClusterMessage
{
  protected:
    int energy_var;
    int status_var;
    int cluster_var;
    int xpos_var;
    int ypos_var;

  private:
    void copy(const Status2BSMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Status2BSMessage&);

  public:
    Status2BSMessage(const char *name=NULL, int kind=0);
    Status2BSMessage(const Status2BSMessage& other);
    virtual ~Status2BSMessage();
    Status2BSMessage& operator=(const Status2BSMessage& other);
    virtual Status2BSMessage *dup() const {return new Status2BSMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getEnergy() const;
    virtual void setEnergy(int energy);
    virtual int getStatus() const;
    virtual void setStatus(int status);
    virtual int getCluster() const;
    virtual void setCluster(int cluster);
    virtual int getXpos() const;
    virtual void setXpos(int xpos);
    virtual int getYpos() const;
    virtual void setYpos(int ypos);
};

inline void doPacking(cCommBuffer *b, Status2BSMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Status2BSMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _STATUS2BSMESSAGE_M_H_

