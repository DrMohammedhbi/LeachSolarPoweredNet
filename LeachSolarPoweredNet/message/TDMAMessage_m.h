//
// Generated file, do not edit! Created by nedtool 4.6 from message/TDMAMessage.msg.
//

#ifndef _TDMAMESSAGE_M_H_
#define _TDMAMESSAGE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
 	#include "ClusterMessage_m.h"
// }}

/**
 * Class generated from <tt>message/TDMAMessage.msg:24</tt> by nedtool.
 * <pre>
 * //
 * // TDMA message
 * //
 * packet TDMAMessage extends ClusterMessage
 * {
 *     int frames;
 *     int frameTime;
 *     int tdma[103];      // XXX constant
 * 
 * }
 * </pre>
 */
class TDMAMessage : public ::ClusterMessage
{
  protected:
    int frames_var;
    int frameTime_var;
    int tdma_var[103];

  private:
    void copy(const TDMAMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TDMAMessage&);

  public:
    TDMAMessage(const char *name=NULL, int kind=0);
    TDMAMessage(const TDMAMessage& other);
    virtual ~TDMAMessage();
    TDMAMessage& operator=(const TDMAMessage& other);
    virtual TDMAMessage *dup() const {return new TDMAMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getFrames() const;
    virtual void setFrames(int frames);
    virtual int getFrameTime() const;
    virtual void setFrameTime(int frameTime);
    virtual unsigned int getTdmaArraySize() const;
    virtual int getTdma(unsigned int k) const;
    virtual void setTdma(unsigned int k, int tdma);
};

inline void doPacking(cCommBuffer *b, TDMAMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TDMAMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _TDMAMESSAGE_M_H_

